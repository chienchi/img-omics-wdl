include required(classpath("application"))

webservice
{
  port = 50010
}

system
{
  abort-jobs-on-terminate = false
  graceful-server-shutdown = true
  workflow-restart = true
  max-concurrent-workflows = 100000
  max-workflow-launch-count = 100000
  new-workflow-poll-rate = 1
  number-of-workflow-log-copy-workers = 20
  number-of-cache-read-workers = 50
}

workflow-options
{
  workflow-log-dir: "/global/scratch/jfroula/JAWS/img-omics-wdl/cromwell-workflow-logs"
  workflow-log-temporary: false
  workflow-failure-mode: "ContinueWhilePossible"
  default
  {
    workflow-type: WDL
    workflow-type-version: "draft-2"
  }
}

call-caching
{
  enabled = true
  invalidate-bad-cache-result = true
}

backend
{
  default = "Local"

  providers
  {

    Local
    {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"

      config
      {
        concurrent-job-limit = 7
        run-in-background = true
        #temporary-directory = "`mktemp -d \"/global/scratch/jaws/dev/cromwell-tmp\"/tmp.XXXXXX`"

        # The list of possible runtime custom attributes.
        runtime-attributes = """
        String? docker
        """

        # Submit string when there is no "docker" runtime attribute.
        submit = "/usr/bin/env bash ${script}"

        # Submit string when there is a "docker" runtime attribute.
        submit-docker = "./singularity_exec.sh ${cwd} ${docker_cwd} ${docker} ${job_shell} ${script}"

        dockerRoot = "${cwd}/cromwell-executions"

        filesystems
        {
          local
          {
            localization: [ "soft-link", "copy" ]

            caching {
              duplication-strategy: [ "hard-link", "soft-link", "copy" ]
              hashing-strategy: "file"
            }
          }
        }

        default-runtime-attributes
        {
          failOnStderr: false
          continueOnReturnCode: 0
        }
      }
    }


    slurm {
        # Documentation
        # https://cromwell.readthedocs.io/en/develop/tutorials/Containers/#job-schedulers

        actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"                                                                                     
        config {
            runtime-attributes = """
                String? docker
                String mem = "5G"
                String time = "00:10:00"
                Int cpu = 2
            """

        submit = """
            sbatch \
              --wait \
              -J ${job_name} \
              -p lr3 \
              -q condo_jgicloud \
              -A lr_jgicloud \
              -D ${cwd} \
              -o ${out} \
              -e ${err} \
              -t ${time} \
              ${"-c " + cpu} \
              --mem=${mem} \
              --wrap "/bin/bash ${script}"
        """

        submit-docker = """
            # Ensure singularity is loaded if it's installed as a module

            # Build the Docker image into a singularity image

            # Submit the script to SLURM
            sbatch \
              --wait \
              -J ${job_name} \
              -p lr3 \
              -q condo_jgicloud \
              -A lr_jgicloud \
              -D ${cwd} \
              -o ${cwd}/execution/stdout \
              -e ${cwd}/execution/stderr \
              -t ${time} \
              ${"-c " + cpu} \
              --mem=${mem} \
              --wrap "/global/scratch/jfroula/JAWS/img-omics-wdl/singularity_exec.sh ${cwd} ${docker_cwd} ${docker} ${job_shell} ${script}"
        """
        
        dockerRoot = "/global/scratch/jfroula/JAWS/img-omics-wdl/cromwell-executions"

        kill = "scancel ${job_id}"
        check-alive = "squeue -j ${job_id}"
        job-id-regex = "Submitted batch job (\\d+).*"
      }
    }
  }
}

database
{
  profile = "slick.jdbc.MySQLProfile$"
  db
  {
    driver = "com.mysql.cj.jdbc.Driver"
    url = "jdbc:mysql://jaws-db.lbl.gov:3306/cromwell_dev?rewriteBatchedStatements=true&autoReconnect=true"
    user = "cromwell_dev"
    password = "7f7VG1d^rD1hS9mwW0R"
    connectionTimeout = 10000
  }
  insert-batch-size = 2000
}
